Source: pyparsing
Section: python
Priority: optional
Maintainer: Debian Python Team <team+python@tracker.debian.org>
Uploaders:
 Matthew Grant <matt@mattgrant.net.nz>,
 Thomas Goirand <zigo@debian.org>,
Build-Depends:
 debhelper-compat (= 13),
 dh-python,
 dh-sequence-python3,
 dh-sequence-sphinxdoc <!nodoc>,
 flit,
 pybuild-plugin-pyproject,
 python3-all,
 python3-pytest <!nocheck>,
 python3-railroad-diagrams <!nocheck>,
 python3-setuptools,
 python3-sphinx <!nodoc>,
Homepage: https://github.com/pyparsing/pyparsing/
Rules-Requires-Root: no
Vcs-Git: https://salsa.debian.org/python-team/packages/pyparsing.git
Vcs-Browser: https://salsa.debian.org/python-team/packages/pyparsing
Standards-Version: 4.6.2
Testsuite: autopkgtest-pkg-pybuild

Package: python-pyparsing-doc
Architecture: all
Multi-Arch: foreign
Section: doc
Depends:
 ${misc:Depends},
 ${sphinxdoc:Depends}
Description: alternative to creating and executing simple grammars - doc
 The parsing module is an alternative approach to creating and
 executing simple grammars, vs. the traditional lex/yacc approach, or
 the use of regular expressions.  The parsing module provides a
 library of classes that client code uses to construct the grammar
 directly in Python code.
 .
 Here's an example:
 .
  from pyparsing import Word, alphas
  greet = Word(alphas) + "," + Word(alphas) + "!"
  hello = "Hello, World!"
  print hello, "->", greet.parseString(hello)
 .
 This package contains documentation for python-pyparsing.

Package: python3-pyparsing
Architecture: all
Multi-Arch: foreign
Depends:
 ${misc:Depends},
 ${python3:Depends},
Provides:
 ${python3:Provides},
Suggests:
 python-pyparsing-doc,
Breaks:
 python3-translate (<< 3.6.0~),
 translate-toolkit (<< 3.6.0~),
Description: alternative to creating and executing simple grammars - Python 3.x
 The parsing module is an alternative approach to creating and
 executing simple grammars, vs. the traditional lex/yacc approach, or
 the use of regular expressions.  The parsing module provides a
 library of classes that client code uses to construct the grammar
 directly in Python code.
 .
 Here's an example:
 .
  from pyparsing import Word, alphas
  greet = Word(alphas) + "," + Word(alphas) + "!"
  hello = "Hello, World!"
  print hello, "->", greet.parseString(hello)
 .
 This package contains the Python 3.x version of python-pyparsing.
